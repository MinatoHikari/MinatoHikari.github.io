import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "notes/massager.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "notes/massager.html",
    'title': "递归 按摩师 —— 交流群群面试题的思考",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>递归 按摩师 —— 交流群群面试题的思考</h1>\n<p>最近交流群的群友离职找工作，说面试题的简单递归题感觉没写对，群友让发出来看看，遂也跟着看了下是什么题目</p>\n<blockquote>\n<p>用递归写一个从0加到10的函数</p>\n</blockquote>\n<p>没错……就这么简单，这个没写出来有点问题，可能平时写业务代码脑子生锈了</p>\n<p>于是立即掏出编辑器实现了一下发到群里</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>sum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> limit<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    sum<span class="token punctuation">,</span>\n    num<span class="token punctuation">,</span>\n    limit\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>没有思考代码如何简洁，用最容易理解的方式写了出来，定义一个函数 <code>add</code>, 需要传入三个参数， 都是数字, <code>sum</code> 总和，也是被加数， <code>num</code> 加数 (后来想想可以再加一个参数<code>step</code>来自定义数列的公差, 不过当时没多想)\n, <code>limit</code> 终止条件，也就是加到几结束。</p>\n<p>接下来是函数的执行部分，<code>sum = sum + num</code> 每个递归中需要将被加数和加数相加，获得一个新数字。 然后需要判断加数是否小于 <code>limit</code>，如果小于就将上一行计算的结果作为 <code>sum</code> 被加数, <code>num + 1</code>\n作为新的加数，<code>limit</code> 原封不动 ，在函数内部调用函数 <code>add</code> 自身并将函数的结果作为返回值返回;如果不小于则说明递归终止，直接返回最后的计算结果.</p>\n<p>不一会有群友发了另一个解出来，比较浓缩:</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> n\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> n <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过这么一搞有的群友似乎看不懂了，于是我将如何理解这个函数，个中的思考方法告诉了他……</p>\n<p>简单的说就是代方程，<code>add(10)</code> 获得的结果为 <code>10 + add(9)</code>，此时传入 add 的值为 9，大于1，所以可以继续\n往下进行，<code>add(9)</code> 的结果为 <code>9 + add(8)</code>，于是联合上一步，最终结果就变成了<code>10 + 9 + add(8)</code>,以此类推，\n下一步的结果为 <code>10 + 9 + 8 + add(7)</code>，一直进行下去，最终会得到结果 <code>10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + add(0)</code>\n因为 0 &lt; 1, 所以 <code>add(0)</code> 结果为0, 也就是 <code>10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0</code></p>\n<p>群友看完大呼卧槽原来是这样！感觉中学数学有点没学好。</p>\n<p>当然，这题最简单的还是用高斯公式…… <code>n*(n + 1)/2</code></p>\n<h3 id="%E6%8C%89%E6%91%A9%E5%B8%88">按摩师<a class="anchor" href="#%E6%8C%89%E6%91%A9%E5%B8%88">§</a></h3>\n<p>这么一搞大家好像突然来了兴致，有群友发了一道题在群里，比上面这个复杂不少，没刷过题的我花了挺久时间才写出来：</p>\n<blockquote>\n<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定-个预\n约请求序列，替按摩师找到最优的预约集合(总预约时间最长)，返回总的分钟数。</p>\n</blockquote>\n<pre class="language-autoit"><code class="language-autoit">示例<span class="token number">1</span><span class="token punctuation">:</span>\n输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\n输出<span class="token punctuation">:</span> <span class="token number">4</span>\n解释<span class="token punctuation">:</span>选择<span class="token number">1</span>号预约和<span class="token number">3</span>号预约，总时长<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">4</span>。\n示例<span class="token number">2</span><span class="token punctuation">:</span>\n输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\n输出<span class="token punctuation">:</span> <span class="token number">12</span>\n解释<span class="token punctuation">:</span>选择<span class="token number">1</span>号预约、<span class="token number">3</span>号预约和<span class="token number">5</span>号预约，总时长<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">12</span>。\n示例<span class="token number">3</span><span class="token punctuation">:</span>\n输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n输出<span class="token punctuation">:</span> <span class="token number">12</span>\n解释<span class="token punctuation">:</span>选择 <span class="token number">1</span>号预约、<span class="token number">3</span>号预约、<span class="token number">5</span>号预约和<span class="token number">8</span>号预约，总时长<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">12</span>。\n</code></pre>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u9012\u5F52 \u6309\u6469\u5E08 \u2014\u2014 \u4EA4\u6D41\u7FA4\u7FA4\u9762\u8BD5\u9898\u7684\u601D\u8003"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>最近交流群的群友离职找工作，说面试题的简单递归题感觉没写对，群友让发出来看看，遂也跟着看了下是什么题目</p>\n<blockquote>\n<p>用递归写一个从0加到10的函数</p>\n</blockquote>\n<p>没错……就这么简单，这个没写出来有点问题，可能平时写业务代码脑子生锈了</p>\n<p>于是立即掏出编辑器实现了一下发到群里</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>sum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> limit<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    sum<span class="token punctuation">,</span>\n    num<span class="token punctuation">,</span>\n    limit\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>没有思考代码如何简洁，用最容易理解的方式写了出来，定义一个函数 <code>add</code>, 需要传入三个参数， 都是数字, <code>sum</code> 总和，也是被加数， <code>num</code> 加数 (后来想想可以再加一个参数<code>step</code>来自定义数列的公差, 不过当时没多想)\n, <code>limit</code> 终止条件，也就是加到几结束。</p>\n<p>接下来是函数的执行部分，<code>sum = sum + num</code> 每个递归中需要将被加数和加数相加，获得一个新数字。 然后需要判断加数是否小于 <code>limit</code>，如果小于就将上一行计算的结果作为 <code>sum</code> 被加数, <code>num + 1</code>\n作为新的加数，<code>limit</code> 原封不动 ，在函数内部调用函数 <code>add</code> 自身并将函数的结果作为返回值返回;如果不小于则说明递归终止，直接返回最后的计算结果.</p>\n<p>不一会有群友发了另一个解出来，比较浓缩:</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> n\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> n <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过这么一搞有的群友似乎看不懂了，于是我将如何理解这个函数，个中的思考方法告诉了他……</p>\n<p>简单的说就是代方程，<code>add(10)</code> 获得的结果为 <code>10 + add(9)</code>，此时传入 add 的值为 9，大于1，所以可以继续\n往下进行，<code>add(9)</code> 的结果为 <code>9 + add(8)</code>，于是联合上一步，最终结果就变成了<code>10 + 9 + add(8)</code>,以此类推，\n下一步的结果为 <code>10 + 9 + 8 + add(7)</code>，一直进行下去，最终会得到结果 <code>10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + add(0)</code>\n因为 0 &lt; 1, 所以 <code>add(0)</code> 结果为0, 也就是 <code>10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0</code></p>\n<p>群友看完大呼卧槽原来是这样！感觉中学数学有点没学好。</p>\n<p>当然，这题最简单的还是用高斯公式…… <code>n*(n + 1)/2</code></p>\n<h3 id="%E6%8C%89%E6%91%A9%E5%B8%88">按摩师<a class="anchor" href="#%E6%8C%89%E6%91%A9%E5%B8%88">§</a></h3>\n<p>这么一搞大家好像突然来了兴致，有群友发了一道题在群里，比上面这个复杂不少，没刷过题的我花了挺久时间才写出来：</p>\n<blockquote>\n<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定-个预\n约请求序列，替按摩师找到最优的预约集合(总预约时间最长)，返回总的分钟数。</p>\n</blockquote>\n<pre class="language-autoit"><code class="language-autoit">示例<span class="token number">1</span><span class="token punctuation">:</span>\n输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\n输出<span class="token punctuation">:</span> <span class="token number">4</span>\n解释<span class="token punctuation">:</span>选择<span class="token number">1</span>号预约和<span class="token number">3</span>号预约，总时长<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">4</span>。\n示例<span class="token number">2</span><span class="token punctuation">:</span>\n输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\n输出<span class="token punctuation">:</span> <span class="token number">12</span>\n解释<span class="token punctuation">:</span>选择<span class="token number">1</span>号预约、<span class="token number">3</span>号预约和<span class="token number">5</span>号预约，总时长<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">12</span>。\n示例<span class="token number">3</span><span class="token punctuation">:</span>\n输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n输出<span class="token punctuation">:</span> <span class="token number">12</span>\n解释<span class="token punctuation">:</span>选择 <span class="token number">1</span>号预约、<span class="token number">3</span>号预约、<span class="token number">5</span>号预约和<span class="token number">8</span>号预约，总时长<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">12</span>。\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8C%89%E6%91%A9%E5%B8%88" }, "\u6309\u6469\u5E08")))),
    'author': "MinatoHikari",
    'contributors': [
        "MinatoHikari"
    ],
    'date': "2021-04-23T15:39:20.000Z",
    'updated': null,
    'excerpt': "最近交流群的群友离职找工作，说面试题的简单递归题感觉没写对，群友让发出来看看，遂也跟着看了下是什么题目 没错……就这么简单，这个没写出来有点问题，可能平时写业务代码脑子生锈了 于是立即掏出编辑器实现了一下发到群里...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "首页",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "text": "随笔",
            "children": [
                {
                    "text": "递归 按摩师 —— 交流群群面试题的思考",
                    "link": "notes/massager.html",
                    "pagePath": "notes/massager.md"
                }
            ]
        },
        {
            "text": "一些快速定位页面问题的技巧",
            "link": "debug.html",
            "pagePath": "debug.md"
        },
        {
            "text": "test",
            "link": "test.html",
            "pagePath": "test.tsx"
        }
    ]
};
