import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "summary/http-requests.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "summary/http-requests.html",
    'title': "前后端交互数据格式",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>前后端交互数据格式</h1>\n<h2 id="getdelete-%E8%AF%B7%E6%B1%82%E5%92%8C-postput%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">GET、DELETE 请求和 POST、PUT请求后端接收参数<a class="anchor" href="#getdelete-%E8%AF%B7%E6%B1%82%E5%92%8C-postput%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">§</a></h2>\n<p>JS 中 <code>XMLHttpRequest</code> 和 <code>fetch</code> 不允许 <code>GET</code> 请求携带请求体 <code>requestbody</code>, <code>DELETE</code> 请求由于可能会在经过代理服务器时丢失 <code>entity body</code> 所以和 <code>GET</code>\n请求一样处理</p>\n<p>上述两种请求的传参方式为在 <code>url</code> 后面携带字符串</p>\n<p><code>POST</code> 和 <code>PUT</code> 请求参数统一放在请求体重，禁止出现一部分参数放在 <code>url</code> 之后，一部分参数放在请求体中的做法。</p>\n<h3 id="%E5%AF%B9-url-%E7%9A%84%E5%90%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E7%9A%84%E8%AF%B4%E6%98%8E">对 <code>url</code> 的各组成部分的说明<a class="anchor" href="#%E5%AF%B9-url-%E7%9A%84%E5%90%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E7%9A%84%E8%AF%B4%E6%98%8E">§</a></h3>\n<p>以 <code>http://localhost/api/sendRequest?name=xxx&amp;age=xxx&amp;sex=xxx#detail</code> 为例</p>\n<p><code>?name=xxx&amp;age=xxx&amp;sex=xxx</code> 问号连带后面 key=value&amp;key=value 格式的多组键值对， js 中称为 <code>urlSearchParams</code> 直译过来就是查询参数。下文的 <code>query</code> 方式传参就是它</p>\n<p><code>#detail</code> 井号连带后面的字符串 js 中称为 <code>hash</code></p>\n<blockquote>\n<p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL">MDN/URL</a></p>\n</blockquote>\n<h3 id="%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%8C%BA%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">下面通过几个例子区分前后端交互的数据格式<a class="anchor" href="#%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%8C%BA%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">§</a></h3>\n<ol>\n<li>\n<p><code>path</code> 传参</p>\n<ul>\n<li>url 示例：<a href="http://localhost/api/%7Bparams%7D">http://localhost/api/{params}</a></li>\n<li>此种方式直接以路径名作为参数</li>\n<li><code>SpringBoot</code> 注解：</li>\n</ul>\n<pre class="language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/car/{id}/owner/{username}"</span><span class="token punctuation">)</span>\n <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getCar</span><span class="token punctuation">(</span>\n     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>\n     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>\n <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>      \n</code></pre>\n<p>这里的 <code>@PathVariable(&quot;id&quot;)</code> 获取的就是 <code>path</code> 中对应的占位符 <code>{id}</code> 的值</p>\n</li>\n<li>\n<p><code>query</code> 传参</p>\n<ul>\n<li>url 示例：<a href="http://localhost/api/getBody?userId=xxx&amp;age=xxx">http://localhost/api/getBody?userId=xxx&amp;age=xxx</a></li>\n<li>此种方式以 <code>?key=value&amp;key2=value2&amp;key3=value3</code> 格式传递参数 （上文说的 <code>urlSearchParams</code>）</li>\n<li><code>SpringBoot</code> 注解：</li>\n</ul>\n<pre class="language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>\n <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span>\n     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>\n <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>   \n</code></pre>\n<p>如果 <code>GET</code> 请求路径为 <code>/user?age=1&amp;name=张三</code> 那么 <code>@RequestParam(&quot;age&quot;)</code> 获取的 <code>age</code> 就是 <code>1</code>, <code>@RequestParam(&quot;inters&quot;)</code> 获取的 <code>name</code>\n就是 <code>张三</code></p>\n<ul>\n<li><code>Swaager</code> 注解<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><code>body</code> 传参</p>\n<ul>\n<li><code>body</code> 传参参数格式统一般只使用两种格式 —— <code>JSON</code> <code>FormData</code></li>\n<li><code>JSON</code> 传参\n<ul>\n<li>需要定义DTO来接收前端传参</li>\n<li><code>SpringBoot</code> 注解：</li>\n</ul>\n<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/demo1"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n<li><code>formData</code> 传参\n<ul>\n<li>可用 <code>@RequestParam</code> 接收参数</li>\n<li>需要额外的swagger标注以注明前端需要传formData:</li>\n</ul>\n<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li><code>SpringBoot</code> 注解：<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u524D\u540E\u7AEF\u4EA4\u4E92\u6570\u636E\u683C\u5F0F"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="getdelete-%E8%AF%B7%E6%B1%82%E5%92%8C-postput%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">GET、DELETE 请求和 POST、PUT请求后端接收参数<a class="anchor" href="#getdelete-%E8%AF%B7%E6%B1%82%E5%92%8C-postput%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">§</a></h2>\n<p>JS 中 <code>XMLHttpRequest</code> 和 <code>fetch</code> 不允许 <code>GET</code> 请求携带请求体 <code>requestbody</code>, <code>DELETE</code> 请求由于可能会在经过代理服务器时丢失 <code>entity body</code> 所以和 <code>GET</code>\n请求一样处理</p>\n<p>上述两种请求的传参方式为在 <code>url</code> 后面携带字符串</p>\n<p><code>POST</code> 和 <code>PUT</code> 请求参数统一放在请求体重，禁止出现一部分参数放在 <code>url</code> 之后，一部分参数放在请求体中的做法。</p>\n<h3 id="%E5%AF%B9-url-%E7%9A%84%E5%90%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E7%9A%84%E8%AF%B4%E6%98%8E">对 <code>url</code> 的各组成部分的说明<a class="anchor" href="#%E5%AF%B9-url-%E7%9A%84%E5%90%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E7%9A%84%E8%AF%B4%E6%98%8E">§</a></h3>\n<p>以 <code>http://localhost/api/sendRequest?name=xxx&amp;age=xxx&amp;sex=xxx#detail</code> 为例</p>\n<p><code>?name=xxx&amp;age=xxx&amp;sex=xxx</code> 问号连带后面 key=value&amp;key=value 格式的多组键值对， js 中称为 <code>urlSearchParams</code> 直译过来就是查询参数。下文的 <code>query</code> 方式传参就是它</p>\n<p><code>#detail</code> 井号连带后面的字符串 js 中称为 <code>hash</code></p>\n<blockquote>\n<p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL">MDN/URL</a></p>\n</blockquote>\n<h3 id="%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%8C%BA%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">下面通过几个例子区分前后端交互的数据格式<a class="anchor" href="#%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%8C%BA%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">§</a></h3>\n<ol>\n<li>\n<p><code>path</code> 传参</p>\n<ul>\n<li>url 示例：<a href="http://localhost/api/%7Bparams%7D">http://localhost/api/{params}</a></li>\n<li>此种方式直接以路径名作为参数</li>\n<li><code>SpringBoot</code> 注解：</li>\n</ul>\n<pre class="language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/car/{id}/owner/{username}"</span><span class="token punctuation">)</span>\n <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getCar</span><span class="token punctuation">(</span>\n     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>\n     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>\n <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>      \n</code></pre>\n<p>这里的 <code>@PathVariable(&quot;id&quot;)</code> 获取的就是 <code>path</code> 中对应的占位符 <code>{id}</code> 的值</p>\n</li>\n<li>\n<p><code>query</code> 传参</p>\n<ul>\n<li>url 示例：<a href="http://localhost/api/getBody?userId=xxx&amp;age=xxx">http://localhost/api/getBody?userId=xxx&amp;age=xxx</a></li>\n<li>此种方式以 <code>?key=value&amp;key2=value2&amp;key3=value3</code> 格式传递参数 （上文说的 <code>urlSearchParams</code>）</li>\n<li><code>SpringBoot</code> 注解：</li>\n</ul>\n<pre class="language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>\n <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span>\n     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>\n <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>   \n</code></pre>\n<p>如果 <code>GET</code> 请求路径为 <code>/user?age=1&amp;name=张三</code> 那么 <code>@RequestParam(&quot;age&quot;)</code> 获取的 <code>age</code> 就是 <code>1</code>, <code>@RequestParam(&quot;inters&quot;)</code> 获取的 <code>name</code>\n就是 <code>张三</code></p>\n<ul>\n<li><code>Swaager</code> 注解<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><code>body</code> 传参</p>\n<ul>\n<li><code>body</code> 传参参数格式统一般只使用两种格式 —— <code>JSON</code> <code>FormData</code></li>\n<li><code>JSON</code> 传参\n<ul>\n<li>需要定义DTO来接收前端传参</li>\n<li><code>SpringBoot</code> 注解：</li>\n</ul>\n<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/demo1"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n<li><code>formData</code> 传参\n<ul>\n<li>可用 <code>@RequestParam</code> 接收参数</li>\n<li>需要额外的swagger标注以注明前端需要传formData:</li>\n</ul>\n<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li><code>SpringBoot</code> 注解：<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#getdelete-%E8%AF%B7%E6%B1%82%E5%92%8C-postput%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0" }, "GET\u3001DELETE \u8BF7\u6C42\u548C POST\u3001PUT\u8BF7\u6C42\u540E\u7AEF\u63A5\u6536\u53C2\u6570"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AF%B9-url-%E7%9A%84%E5%90%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E7%9A%84%E8%AF%B4%E6%98%8E" }, "\u5BF9 url \u7684\u5404\u7EC4\u6210\u90E8\u5206\u7684\u8BF4\u660E")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%8C%BA%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F" }, "\u4E0B\u9762\u901A\u8FC7\u51E0\u4E2A\u4F8B\u5B50\u533A\u5206\u524D\u540E\u7AEF\u4EA4\u4E92\u7684\u6570\u636E\u683C\u5F0F")))))),
    'author': "MinatoHikari",
    'contributors': [
        "MinatoHikari"
    ],
    'date': "2021-04-29T07:39:27.000Z",
    'updated': null,
    'excerpt': "GET、DELETE 请求和 POST、PUT请求后端接收参数 JS 中 XMLHttpRequest 和 fetch 不允许 GET 请求携带请求体 requestbody, DELETE 请求由于可能会在经过代理服务器时丢失 entity body 所以和 GET 请求一样处理 上述两种请求的传...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "首页",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "text": "随笔",
            "children": [
                {
                    "text": "递归 按摩师 —— 交流群群面试题的思考",
                    "link": "notes/massager.html",
                    "pagePath": "notes/massager.md"
                }
            ]
        },
        {
            "text": "总结",
            "children": [
                {
                    "text": "一些快速定位页面问题的技巧",
                    "link": "summary/debug.html",
                    "pagePath": "summary/debug.md"
                },
                {
                    "text": "前后端交互数据格式",
                    "link": "summary/http-requests.html",
                    "pagePath": "summary/http-requests.md"
                }
            ]
        },
        {
            "text": "test",
            "link": "test.html",
            "pagePath": "test.tsx"
        }
    ]
};
